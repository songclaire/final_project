package kr.or.ddit.emp.profInfo.service;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.commons.dao.AttaFileDAO;
import kr.or.ddit.emp.profInfo.dao.ProfInfoDao;
import kr.or.ddit.vo.AttaFileVO;
import kr.or.ddit.vo.CollVO;
import kr.or.ddit.vo.CommVO;
import kr.or.ddit.vo.LaboVO;
import kr.or.ddit.vo.MajorVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.StudentVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class ProfInfoServiceImpl implements ProfInfoService {

	@Inject
	private ProfInfoDao profInfoDao;
	

//첨부파일
	@Inject
	private AttaFileDAO attaFileDAO;
	
	@Value("#{appInfo.imageFolder}")
	private File imageFolder;
	
	@Value("#{appInfo.imageFolder}")
	private String imageFolderURL;

	//추가함
	private AttaFileVO attaFileVO;
	
	@PostConstruct
	public void init() throws IOException {
		log.info("첨부파일 저장 경로: {}", imageFolder);
	}
//첨부파일
	

	//목록 만들기
	@Override
	public void retrieveProfInfoList(PagingVO<ProfessorVO> pagingVO) {
		int totalRecord = profInfoDao.selectTotalRecord(pagingVO);
		pagingVO.setTotalRecord(profInfoDao.selectTotalRecord(pagingVO));
		List<ProfessorVO> profInfoList = profInfoDao.selectProfInfoList(pagingVO);
		pagingVO.setDataList(profInfoDao.selectProfInfoList(pagingVO));
	}

	//상세조회
	@Override
	public ProfessorVO retrieveProfInfo(String profId) {
		ProfessorVO profInfo = profInfoDao.selectProfInfo(profId);
		if(profInfo == null)
			throw new RuntimeException(String.format("%s 는 없는 상품", profId));
		return profInfo;
	}

	
	
	//등록하기
	@Override
	@Transactional
	public String createProfTotalProfInfo(ProfessorVO profId) {
		int rowcnt = profInfoDao.insertUserProfInfo(profId);
		rowcnt += profInfoDao.insertProfProfInfo(profId);
		//첨부파일
		rowcnt += processAttaFilelist(profId);
		return "OK";
	}

	//첨부파일
	private int processAttaFilelist(ProfessorVO prof) {
		// attaFileList=[AttaFileVO(attaId=null, attaSn=null, attaPath=null, attaFilenm=범.png,
//		attaSavenm=21cb074a-1581-4366-833d-61d663fcec49, attaMime=image/png, attaFilesize=160828, attaFancysize=157 KB, attaDownload=null)],
		List<AttaFileVO> attaFileList = prof.getAttaFileList();
		if(attaFileList == null || attaFileList.isEmpty()) {return 0;}
		attaFileList.stream().forEach(attaFile -> {
			attaFile.setImageFolder(imageFolderURL);
			attaFile.setAttaId(prof.getProfId());
		});
		
		int rowcnt = attaFileDAO.insertProfInfoFiles(prof);
		
		//첨부파일 객체
		MultipartFile[] files = prof.getFiles();
		
		//파일이 저장되는 경로
		String uploadFolder = "D:\\A_TeachingMaterial\\06.JSP_Spring\\workspace\\FinalProject_305_04\\src\\main\\webapp\\resources\\images\\attaFile";
		
		for(MultipartFile multipartFile : files) {
			log.info("---------------------------");
			//이미지 명
			log.info("Upload File Name : " + multipartFile.getOriginalFilename());
			log.info("Upload File Size : " + multipartFile.getSize());
			//uploadFolder : C:\\upload
			//multipartFile.getOriginalFilename() : img01.jpg
			File saveFile = new File(uploadFolder, multipartFile.getOriginalFilename());
			
			try {
				//파일이 복사 됨
				multipartFile.transferTo(saveFile);
				
				return rowcnt;
			} catch (IllegalStateException e) {
				log.error(e.getMessage());
				return rowcnt;
			} catch (IOException e) {
				log.error(e.getMessage());
				return rowcnt;
			}
		}//end for
		return rowcnt;
	}
	
	
	
	
	
	
	
	
	
	
	
	//수정하기
	@Override
	@Transactional
	public String updateProfTotalProfInfo(ProfessorVO profId) {
		int rowcnt1 = profInfoDao.updateProfProfInfo(profId);
		rowcnt1 += profInfoDao.updateUserProfInfo(profId);
//		//첨부파일
		rowcnt1 += attaFileDAO.deleteProfAttaFile(profId.getProfId());
		rowcnt1 += processAttaFilelist(profId);
		return "OK";
	}
	
	
	
	
	/**
	 * 빌딩 셀렉트박스
	 */
	@Override
	public List<CommVO> selectBuilding() {
		return profInfoDao.selectBuilding();
	}

	/**
	 * 연구실 셀렉트박스
	 */
	@Override
	public List<LaboVO> selectBuildingNum(CommVO commVO) {
		return profInfoDao.selectBuildingNum(commVO);
	}

	
	
	/**
	 * 단과대학 셀렉트박스로 띄우기
	 */
	@Override
	public List<CollVO> retrieveCollList() {
		return profInfoDao.selectCollList();
	}

	/**
	 * 학과 셀렉트박스로 띄우기 (단과먼저 띄우고 선별됨)
	 */
	@Override
	public List<MajorVO> selectMajorList(CollVO collVO) {
		return profInfoDao.selectMajorList(collVO);
	}

	
	/**
	 * 직책 셀렉트박스 띄우기
	 */
	@Override
	public List<CommVO> selectPosList() {
		return profInfoDao.selectPosList();
	}
	
	
	
	
	
	
	
	
	
	

}
