package kr.or.ddit.prof.test.service;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import kr.or.ddit.prof.test.dao.TestProfDAO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.TestPasgVO;
import kr.or.ddit.vo.TestQueVO;
import kr.or.ddit.vo.TestVO;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Service
public class TestProfServiceImple implements TestProfService {

	// dao주입
	@Inject
	private TestProfDAO dao;

	
	/**
	 * 출제한 전체 시험 목록 조회
	 */
	@Override
	public void retrieveTestList(PagingVO<TestVO> pagingVO, String profId) {
		List<TestVO> testList = dao.testProfTotalList(pagingVO);
		log.info("testList!!! {}" , testList);
		pagingVO.setDataList(testList);
	}


	/**
	 * 시험 정보 뷰 
	 */
	@Override
	public List<TestVO> retrieveTest(TestVO testVO) {
		
		List<TestVO> test = dao.selectTestInfo(testVO);
		//log.info("List<TestVO> 이거!!!!!!!!! {}",test);
		
		//examId, lectId 가져오기 
		for (int i = 0; i < test.size(); i++) {
			testVO.setExamId(test.get(i).getExamId());
			testVO.setLectId(test.get(i).getLectId());
			
			log.info("testVOgetExamId {}" , test.get(i).getExamId());
			log.info("testVOgetLectId {}" , test.get(i).getLectId());
		}
		
		/*if(test == null) {
			throw new RuntimeException(String.format("%s는 없는 시험",testVO));
		}*/
		return test;
		
	}

	
	
	/**
	 * 강의명 select 뷰
	 */
	@Override
	public List<LectureVO> retrieveLecture() {
		return dao.selectLectureList();
	}


	
	

	/**
	 * 시험등록페이지 insert
	 */
	@Override
	public String createTotalTest(TestVO testVO) {
		
		log.info("serviceImple : " + testVO);
		
		
		int temp = 10000;
		int temp2 = 10000;
		String result = "";
		
		//[1]
		int result_1 = dao.insertTest(testVO);
		log.info("result_1 : " + result_1);
		
		List<TestQueVO> queListTemp = testVO.getQueList();
		log.info("queListTemp : " + queListTemp);
		List<TestQueVO> queList = new ArrayList<TestQueVO>();
		
		//[2]
		int testNum = 1;
		for(TestQueVO testQueVO : queListTemp) {
				
				//[2]
				testQueVO.setTestId(testVO.getTestId());
				testQueVO.setTestNum(testNum + "");
				
				int result_2 = dao.insertQue(testQueVO);
				log.info("result_2 : " + result_2);
				
				//[3]
				//지문시작 
				List<TestPasgVO> pasgListTemp = testQueVO.getPasgList();
				List<TestPasgVO> pasgList = new ArrayList<TestPasgVO>();
				
				for(TestPasgVO testPasgVO : pasgListTemp) {
					testPasgVO.setTestQueId(testQueVO.getTestQueId());
					
					dao.insertPasg(testPasgVO);
					
					pasgList.add(testPasgVO);
				}
				
				log.info("pasgList (" + testNum + ") : "  + pasgList);
				
				
				testNum++;
				
				
		}//end outer for

		
		return "OK";
	}

	
	
	
	




	
	
	
}
