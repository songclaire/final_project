package kr.or.ddit.commons.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.Charset;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.web.context.WebApplicationContext;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerFontProvider;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.css.CssFile;
import com.itextpdf.tool.xml.css.StyleAttrCSSResolver;
import com.itextpdf.tool.xml.html.CssAppliers;
import com.itextpdf.tool.xml.html.CssAppliersImpl;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;

import kr.or.ddit.student.tuition.dao.TuitionDao;
import kr.or.ddit.student.tuition.service.TuitionService;
import kr.or.ddit.vo.TuitionVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class PdfServiceImpl implements PdfService {
	
	@Inject
	TuitionDao tuitionDAO;
	@Inject
	TuitionService tuitionService;
	@Inject
	WebApplicationContext context;
	
	TuitionVO tuitionVO;

	@Override
	public int createHtmlPdf
		(String filename
		, String htmlStr
		, HttpServletRequest request
	) {
		
		ClassPathResource result = null;
		int cnt = 0;
		try {
			String storePathString = "d:\\pdf\\";
			String serverPath = request.getSession().getServletContext().getRealPath("/") + "resources/css/";
			
			File saveFolder = new File(storePathString);
			
			if (!saveFolder.exists() || saveFolder.isFile()) {
				saveFolder.mkdirs();
			}
			
			Document document = new Document();
			String tblId = filename;
			filename += ".pdf";
			
			File pdfFile = new File(storePathString, filename);
			
			if(pdfFile.isFile()) {
				pdfFile.delete();
			}
			
			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdfFile));
			
			document.open();
			
			htmlStr = "<html><body style='font-family: MalgunGothic;'>" + htmlStr + "</body></html>";
			
			CSSResolver cssResolver = new StyleAttrCSSResolver();
			CssFile cssFile = XMLWorkerHelper.getCSS(new FileInputStream(serverPath + "pdf.css"));
			cssResolver.addCss(cssFile);
			
			XMLWorkerFontProvider fontProvider = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);
			
			fontProvider.register(serverPath +  "font.css", "MalgunGothic");
			CssAppliers cssAppliers = new CssAppliersImpl(fontProvider);
			
			HtmlPipelineContext htmlContext = new HtmlPipelineContext(cssAppliers);
			htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());
			
			
			PdfWriterPipeline pdf = new PdfWriterPipeline(document, writer);
			HtmlPipeline html = new HtmlPipeline(htmlContext, pdf);
			CssResolverPipeline css = new CssResolverPipeline(cssResolver, html);
			
			XMLWorker worker = new XMLWorker(css, true);
			// 캐릭터 셋 설정
			XMLParser xmlParser = new XMLParser(worker, Charset.forName("UTF-8"));

			StringReader strReader = new StringReader(htmlStr);
			xmlParser.parse(strReader);

			document.close();
			writer.close();
			
			
		} catch(DocumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return 1;
	}
	
	

}
