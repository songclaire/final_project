package kr.or.ddit.commons.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorker;
import com.itextpdf.tool.xml.XMLWorkerFontProvider;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.css.CssFile;
import com.itextpdf.tool.xml.css.StyleAttrCSSResolver;
import com.itextpdf.tool.xml.html.CssAppliers;
import com.itextpdf.tool.xml.html.CssAppliersImpl;
import com.itextpdf.tool.xml.html.Tags;
import com.itextpdf.tool.xml.parser.XMLParser;
import com.itextpdf.tool.xml.pipeline.css.CSSResolver;
import com.itextpdf.tool.xml.pipeline.css.CssResolverPipeline;
import com.itextpdf.tool.xml.pipeline.end.PdfWriterPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipeline;
import com.itextpdf.tool.xml.pipeline.html.HtmlPipelineContext;

import kr.or.ddit.student.tuition.dao.TuitionDao;
import kr.or.ddit.student.tuition.service.TuitionService;
import kr.or.ddit.vo.TuitionVO;

import org.springframework.mock.web.MockMultipartFile;

@Service
public class PdfServiceImpl implements PdfService {

	@Inject
	TuitionDao tuitionDAO;

	TuitionVO tuitionVO;

	@Inject
	TuitionService tuitionService;

	@Override
	public String createPdf(String stdId, String semeId) {
		String result = ""; // 초기값이 null이 들어가면 오류가 발생될수 있기 때문에 공백을 지정

		try {

			Document document = new Document(); // pdf문서를 처리하는 객체

			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("d:/test.pdf"));
			// pdf파일의 저장경로를 d드라이브의 sample.pdf로 한다는 뜻

			document.open(); // 웹페이지에 접근하는 객체를 연다

			BaseFont baseFont = BaseFont.createFont("C:\\malgun.ttf", BaseFont.IDENTITY_H,
					BaseFont.EMBEDDED);
			// pdf가 기본적으로 한글처리가 안되기 때문에 한글폰트 처리를 따로 해주어야 한다.
			// createFont메소드에 사용할 폰트의 경로 (malgun.ttf)파일의 경로를 지정해준다.
			// 만약에 이 경로에 없을 경우엔 java파일로 만들어서 집어넣어야 한다.

			Font font = new Font(baseFont, 12); // 폰트의 사이즈를 12픽셀로 한다.

			PdfPTable table = new PdfPTable(4); // 4개의 셀을 가진 테이블 객체를 생성 (pdf파일에 나타날 테이블)
			//			Chunk chunk = new Chunk("등록금 고지서", font); // 타이틀 객체를 생성 (타이틀의 이름을 장바구니로 하고 위에 있는 font를 사용)

			Paragraph title = new Paragraph("등록금 고지서", new Font(baseFont, 20, Font.BOLD |Font.UNDERLINE));
			title.setAlignment(Element.ALIGN_CENTER);
			document.add(title); // 문단을 만들어서 가운데 정렬 (타이틀의 이름을 가운데 정렬한다는 뜻)

			//			document.add(Chunk.NEWLINE);
			document.add(Chunk.NEWLINE); // 줄바꿈 (왜냐하면 타이틀에서 두줄을 내린후에 셀(테이블)이 나오기 때문)

			PdfPCell cell1 = new PdfPCell(new Phrase("학번", font)); // 셀의 이름과 폰트를 지정해서 셀을 생성한다.
			cell1.setHorizontalAlignment(Element.ALIGN_CENTER); // 셀의 정렬방식을 지정한다. (가운데정렬)
			cell1.setBackgroundColor(BaseColor.GRAY);
			cell1.setGrayFill(0.8f);
			//			cell1.setFixedHeight(30f);
			cell1.setPadding(10);	// 셀 여백 지정

			PdfPCell cell2 = new PdfPCell();
			cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell2.setPadding(10);	// 셀 여백 지정

			PdfPCell cell3 = new PdfPCell(new Phrase("학년", font));
			cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell3.setBackgroundColor(BaseColor.GRAY);
			cell3.setGrayFill(0.8f);
			cell3.setPadding(10);	// 셀 여백 지정

			PdfPCell cell4 = new PdfPCell(new Phrase("", font));
			cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell4.setFixedHeight(30f);
			cell4.setPadding(10);	// 셀 여백 지정

			//			table.completeRow();

			PdfPCell cell5 = new PdfPCell(new Phrase("구분", font));
			cell5.setColspan(2);
			cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell5.setPadding(10);	// 셀 여백 지정

			PdfPCell cell6 = new PdfPCell(new Phrase("등록금", font));
			cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell6.setPadding(10);	// 셀 여백 지정

			PdfPCell cell7 = new PdfPCell(new Phrase("장학금", font));
			cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell7.setPadding(10);	// 셀 여백 지정

			PdfPCell cell8 = new PdfPCell(new Phrase("입학금", font));
			cell8.setColspan(2);
			cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell8.setPadding(10);	// 셀 여백 지정


			PdfPCell cell9 = new PdfPCell(new Phrase("0", font));
			cell9.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell9.setPadding(10);	// 셀 여백 지정

			PdfPCell cell10 = new PdfPCell(new Phrase("", font));
			cell10.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell10.setPadding(10);	// 셀 여백 지정

			PdfPCell cell11 = new PdfPCell(new Phrase("수업료", font));
			cell11.setColspan(2);
			cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell11.setPadding(10);	// 셀 여백 지정

			PdfPCell cell12= new PdfPCell(new Phrase("", font));
			cell12.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell12.setPadding(10);	// 셀 여백 지정

			PdfPCell cell13= new PdfPCell(new Phrase("", font));
			cell13.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell13.setPadding(10);	// 셀 여백 지정

			PdfPCell cell14 = new PdfPCell(new Phrase("납입금액", font));
			cell14.setColspan(2);
			cell14.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell14.setPadding(10);	// 셀 여백 지정
			cell14.setGrayFill(0.8f);

			PdfPCell cell15= new PdfPCell(new Phrase("", font));
			cell15.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell15.setPadding(10);	// 셀 여백 지정

			PdfPCell cell16= new PdfPCell(new Phrase("", font));
			cell16.setHorizontalAlignment(Element.ALIGN_CENTER);
			//			table.completeRow();
			cell16.setPadding(10);	// 셀 여백 지정

			PdfPCell cell18= new PdfPCell(new Phrase("납부계좌", font));
			cell18.setHorizontalAlignment(Element.ALIGN_CENTER);
			cell18.setPadding(10);	// 셀 여백 지정

			PdfPCell cell19= new PdfPCell(new Phrase("기업은행 036190-73-374426", font));
			cell19.setColspan(3);
			cell19.setHorizontalAlignment(Element.ALIGN_CENTER);
			//			table.completeRow();
			cell19.setPadding(10);	// 셀 여백 지정

			table.addCell(cell1); // 그리고 테이블에 위에서 생성시킨 셀을 넣는다.
			table.addCell(cell2);
			table.addCell(cell3);
			table.addCell(cell4);
			table.addCell(cell5);
			table.addCell(cell6);
			table.addCell(cell7);
			table.addCell(cell8);
			table.addCell(cell9);
			table.addCell(cell10);
			table.addCell(cell11);
			table.addCell(cell12);
			table.addCell(cell13);
			table.addCell(cell14);
			table.addCell(cell15);
			table.addCell(cell16);
			//			table.addCell(cell17);
			table.addCell(cell18);
			table.addCell(cell19);

			document.add(Chunk.NEWLINE);

			List<TuitionVO> items = tuitionService.retrieveTuitionBill(stdId, semeId); // 서비스로부터 id값을 매개값으로 주어서 장바구니목록을 가져온다.
			for (int i = 0; i < items.size(); i++) {
//				TuitionVO tvo(get); // 레코드에 값들을 꺼내서 dto에 저장
				 // 레코드에 값들을 꺼내서 dto에 저장
				//학번
				cell2= new PdfPCell(new Phrase("" + tvo.getTuitionPayVO().getStdId()));
//								Phrase cellProductName = ; // 반복문을 사용해서 상품정보를 하나씩
				// 출력해서 셀에 넣고 테이블에
				// 저장한다.

				//학년
//				PdfPCell cellCamYear = new PdfPCell(new Phrase("들어오나?1"+items.get(0), font));
				// Phrase타입은 숫자형(int형 같은타입)으로 하면 에러가 발생되기 때문에 dto앞에 공백("")주어서 String타입으로 변경한다.

				// 수업료
				//				PdfPCell cellTuition = new PdfPCell(new Phrase("" + tvo.getTuitionDetVO().getDetailCrit(), font));
				// Phrase타입은 숫자형(int형 같은타입)으로 하면 에러가 발생되기 때문에 dto앞에 공백("")주어서 String타입으로 변경한다.

				// 납입금액
//				PdfPCell cellAmount = new PdfPCell(new Phrase("들어오나2" + tvo.getTuitionAmount(), font));
				// Phrase타입은 숫자형(int형 같은타입)으로 하면 에러가 발생되기 때문에 dto앞에 공백("")주어서 String타입으로 변경한다.

				// 장학금액
				//				PdfPCell cellScho = new PdfPCell(new Phrase(""+tvo.getScholarshipVO().getSchsAmount(), font));
				// Phrase타입은 숫자형(int형 같은타입)으로 하면 에러가 발생되기 때문에 dto앞에 공백("")주어서 String타입으로 변경한다.


				//				cell2.setPhrase(cellProductName);// 셀의 데이터를 테이블에 저장한다. (장바구니안에 들어있는 갯수만큼 테이블이 만들어진다)
//				table.addCell(cellCamYear); // 학년
				//				table.addCell(cellTuition); // 수업료
//				table.addCell(cellAmount); // 납입금액
				//				table.addCell(cellScho); // 장학금액
//			}
			document.add(table); // 웹접근 객체에 table를 저장한다.

			String filename = "D:\\A_TeachingMaterial\\6.JSP_Spring\\workspace\\FinalProject_305_04\\src\\main\\webapp\\resources\\images\\대재대도장.png";
			Image image = Image.getInstance(filename);
			image.scaleAbsolute(200f, 80f);	// 이미지 크기 조절
			image.setAlignment(Image.MIDDLE);
			document.add(image);


			document.close(); // 저장이 끝났으면 document객체를 닫는다.
			result = "pdf 파일이 생성되었습니다.";

		} catch (Exception e) {
			e.printStackTrace();
			result = "pdf 파일 생성 실패...";
		}
		return result;
	}

	@Override
	public MultipartFile createHtmlPdf(String filename, String htmlStr, HttpServletRequest request) {
		MultipartFile result = null;
		try {
			String storePathString = "d:\\pdf\\";// 파일이 저장될 경로이며 따로 설정해주면 된다.

			// 서버 내 파일 주소 : css나 폰트를 가져올때 쓴다.
			String serverPath = request.getSession().getServletContext().getRealPath("/") + "resources/css/";
			//위 serverPath를 출력해보면 아래와 같이 나온다.
			//D:\A_TeachingMaterial\06_spring\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\springProj\resources/css/

			// 파일 저장할 주소이며 위에서 선언한 storePathString = "d://" 이다.
			File saveFolder = new File(storePathString);

			// 파일 저장 경로가 있는지 확인하고 없으면 생성하는 if문
			if (!saveFolder.exists() || saveFolder.isFile()) {
				saveFolder.mkdirs();
			}

			// 용지 설정이 가능하다.
			Document document = new Document();//new Document(PageSize.A4.rotate())는 용기를 가로로 눕힌 모양이다. 인터넷 용지 설정방법 참고

			// 보내준 파일 이름에 파일 확장자를 더한다.
			filename += ".pdf";

			//~경로에 파일이름을 결합하기 위한 용도
			// "d://'보내준 파일이름'.pdf"
			String realName = storePathString;
			realName += filename;

			File pdfFile = new File(realName);
			//파일이 있으면 삭제(같은 이름으로 만들 때마다 새로 쓰기 위해서)
			if (pdfFile.isFile()) {
				pdfFile.delete();
			}

			//pdf를 만들기 시작한다.
			PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(realName));

			document.open();

			//			htmlStr = htmlStr.replaceAll("src=\"/", "src=\"http://127.0.0.1:8080/");
			htmlStr = "<html><body style='font-family: MalgunGothic;'>" + createPdf("20111394", "DA10003") + "</body></html>";

			//document open의 한 종류인듯
			//			XMLWorkerHelper helper = XMLWorkerHelper.getInstance();

			// css파일 설정
			CSSResolver cssResolver = new StyleAttrCSSResolver();
			//css파일은 서버파일 경로 + css이름
			CssFile cssFile = XMLWorkerHelper.getCSS(new FileInputStream(serverPath + "itext.css"));
			cssResolver.addCss(cssFile);

			XMLWorkerFontProvider fontProvider = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);



			// 폰트를 설정한다. 폰트 설정 누락시 한글이 안보이는 경우 발생
			fontProvider.register(serverPath +  "font.css", "MalgunGothic"); // MalgunGothic은 font-family용 alias

			CssAppliers cssAppliers = new CssAppliersImpl(fontProvider);

			HtmlPipelineContext htmlContext = new HtmlPipelineContext(cssAppliers);
			htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());

			// html을 pdf로 변환시작
			PdfWriterPipeline pdf = new PdfWriterPipeline(document, writer);
			HtmlPipeline html = new HtmlPipeline(htmlContext, pdf);
			CssResolverPipeline css = new CssResolverPipeline(cssResolver, html);

			XMLWorker worker = new XMLWorker(css, true);
			// 캐릭터 셋 설정
			XMLParser xmlParser = new XMLParser(worker, Charset.forName("UTF-8"));

			StringReader strReader = new StringReader(htmlStr);
			xmlParser.parse(strReader);

			document.close();
			writer.close();


			// egov의 첨부파일 형태로 추가하기 위해서 MultipartFile을 만들어 준다.
			Path path = Paths.get(realName);
			String contentType = "application/pdf";
			byte[] content = null;
			content = Files.readAllBytes(path);
			result = new MockMultipartFile(filename, filename, contentType, content);

		} catch (DocumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return result;
	}

}
