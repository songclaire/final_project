package kr.or.ddit.prof.test.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.annotations.Param;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.prof.test.service.TestProfService;
import kr.or.ddit.ui.PaginationRenderer;
import kr.or.ddit.validate.InsertGroup;
import kr.or.ddit.vo.AssignmentVO;
import kr.or.ddit.vo.LectureVO;
import kr.or.ddit.vo.MyStudentVO;
import kr.or.ddit.vo.NoticeVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.SearchVO;
import kr.or.ddit.vo.SemesterVO;
import kr.or.ddit.vo.StudentVO;
import kr.or.ddit.vo.TestAllowVO;
import kr.or.ddit.vo.TestPasgVO;
import kr.or.ddit.vo.TestQueVO;
import kr.or.ddit.vo.TestVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/prof/test/**")
public class TestProfController {

	//service주입
	private final TestProfService service;
	
	
	@Resource(name="bootstrapPaginationRender")
	private PaginationRenderer renderer;
	
	
	/**
	 * 출제한 전체 시험 목록 조회
	 * @param currentPage
	 * @param searchVO
	 * @param profId
	 * @param model
	 * @return
	 */
	@GetMapping
	public String testListUI(
		@RequestParam(value="page", required=false, defaultValue="1") int currentPage
		, @ModelAttribute("simpleCondition") SearchVO searchVO
		, @RequestParam String profId
		, Model model
	) {
		log.info("profId!!!!!!!!!!! : {}", profId);

		
//		log.info("currentPage_0 : " + currentPage);
//		log.info("profId_0 : " + profId);
//		log.info("searchVO_0 : " + searchVO);
		
		TestVO testVO = new TestVO();
		testVO.setProfId(profId);
		log.info("testVO!!!!!!!!!!! {}: " , testVO);
		

		PagingVO<TestVO> pagingVO = new PagingVO<>(100, 50);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO); //검색
		pagingVO.setDetailCondition(testVO);

		service.retrieveTestList(pagingVO, profId);
	    log.info("pagingVO!!!!!!!!!!! : " + pagingVO);
		
		
		
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("profId", profId);

		//prof폴더 > test폴더 > test.jsp를 리턴(view)
		return "prof/test/test";
	}
	
	
	
	
	
	/**
	 * test 전체 목록 게시판 글 목록 출력 메소드 (ajax)
	 */
/*	@GetMapping(produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
	public String TestListData(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			, @ModelAttribute("simpleCondition") SearchVO searchVO
			, @RequestParam String testId
			, Model model) {
		//currentPage : 1
		log.info("currentPage : " + currentPage);
		//searchVO : SearchVO(searchType=, searchWord=)
		log.info("searchVO : " + searchVO);
		//profId : 3120001
		log.info("testId : " + testId);
		
		TestVO testVO = new TestVO();
		MyStudentVO myStudentVO = new MyStudentVO();
		myStudentVO.setProfId(testId);
		testVO.setMyStudentVO(myStudentVO);
		
		PagingVO<TestVO> pagingVO = new PagingVO<>(50,50);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);
		//testVO의 myStudentVO의 profId멤버변수에  3120001이 들어있음
		pagingVO.setDetailCondition(testVO);
		
		log.info("pagingVO_3 : " + pagingVO);
		
		service.retrieveTestList(pagingVO);
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("pagingHTML", renderer.renderPagination(pagingVO));
		
		return "jsonView";
	}*/
	
	
	////////////////////////////////////////////////////////////
	
	/**
	 * 시험등록페이지view - 시험정보 
	 * @return
	 */
	@GetMapping("/testForm")
	public String testFormUI(
		@RequestParam String profId
		, Model model
	) {
		
		
		log.info("profId dsgdg {}", profId);
		
		
		TestVO testVO = new TestVO();
		
		testVO.setProfId(profId);
		service.retrieveTest(testVO);
		
		log.info("testVO dsgdg {}", testVO);
		
		model.addAttribute("testVO" , testVO);
		
		List<LectureVO> lectureVO = service.retrieveLecture(profId);
		model.addAttribute("lectureVO", lectureVO);
		
		return "prof/test/testForm";
	}
	
	
	@PostMapping("/testForm")
	public Object testFormInsert(
		@Validated(InsertGroup.class) @ModelAttribute("test") TestVO testVO
		, @RequestParam() String profId
		, Model model
	) {
		
		log.info("컨트롤러 진입 testVO {}" , testVO);
		log.info("testVO.profId : {}" , testVO.getProfId());
		

		PagingVO<TestVO> pagingVO = new PagingVO<>();
		testVO.setProfId(profId);
		pagingVO.setDetailCondition(testVO);
		log.info("pagingVO!!!!!!!!!!!!!!!!!!!!! {} " , pagingVO);
		
		
		
		/*log.info("queNum insert컨트롤러 진입 {}" , testVO);
		for (String queNum : queNumList) {
			log.info("queNum !!!!! {}" , queNum);
		}*/
		
		
		//log.info("queNum insert컨트롤러 진입 {}" , testVO.getQueList().get(index));
		
		
		/*List<TestQueVO> testQueList = testVO.getQueList();
		List<TestQueVO> testQList2 = new ArrayList<TestQueVO>();
		
		for (TestQueVO testQue : testQueList) { //testQueList에 있는 내용들 testQue안에 넣기  
			String[] testNumArr = testQue.getTestNum().split(","); //
			String[] testQueArr = testQue.getTestQue().split(",");
		
			
			for (int i = 0; i < testQueArr.length; i++) {  // 일단 적은 걸로
				TestQueVO testQueVO2 = new TestQueVO();
				testQueVO2.setTestNum(testNumArr[i]);
				testQueVO2.setTestQue(testQueArr[i]);
				testQList2.add(testQueVO2);
				log.info("testQList2~ {}", testQList2);
			}
		}
		testVO.setQueList(testQList2);
		log.info("testVO~ {}", testVO);*/
		
	/*	TestQueVO testQueVO = new TestQueVO();
		List<TestPasgVO> testPasgList = testQueVO.getPasgList();
		*/

		
		String viewName = null;
		String rowcnt = service.createTotalTest(testVO);
		
		if(rowcnt == "OK") {
			viewName = "redirect:/prof/test?profId=" + testVO.getProfId();
		}else {
			model.addAttribute("message", "서버오류");
			viewName = "prof/test/testForm";
		}
		
		return viewName;
	}
	
	
	
	
	///////////////////////////////////////////////////////////////
	
	
	/**
	 * 시험 제출한 학생 목록 
	 * @param currentPage
	 * @param searchVO
	 * @param testId
	 * @param model
	 * @return
	 */
	@RequestMapping("testSubmitList")
	public String submitStudentList(
		@RequestParam(value="page", required=false, defaultValue="1") int currentPage
		, @ModelAttribute("simpleCondition") SearchVO searchVO
		, @RequestParam String testId
		, Model model
	) {
		
		PagingVO<TestVO> pagingVO = new PagingVO<>(100, 50);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);

		
		TestVO testVO = new TestVO();
		testVO.setTestId(testId);
		pagingVO.setDetailCondition(testVO);
		log.info("pagingVO !!!!!!!!!!!!  : {}", pagingVO);
		
		service.retrieveTestSubmitStudent(pagingVO, testId);
		model.addAttribute("pagingVO", pagingVO);
		
		return "prof/test/submitStudentList";
	}
	
	
	
	
	/**
	 * 제출한 학생 단건 조회
	 * @param TEST_ALLOW_ID
	 * @param model
	 * @return
	 */
	@ResponseBody
	@PostMapping("/submitStudentView")
	public TestVO updateScore(
		@RequestBody Map<String, Object> dataMap
	) {
		
		//Map<String, Object> dataMap => testVO가 객체 형태로 넘겨지기 때문에 Object
		/*let data = {
				"testVO" : {
					"testId":testId
				},
				"stdIdParam" : stdId
		};*/
		
		
		log.info("testVO!!!!! : {}", ((HashMap<String, String>)dataMap.get("testVO")).get("testId")); //testId String을 받아야되기 때문에 HashMap<String, String>으로 캐스팅 필요 
		log.info("stdIdParam : {}", dataMap.get("stdIdParam"));
		
		String testId = ((HashMap<String, String>)dataMap.get("testVO")).get("testId");
	    String stdIdParam = dataMap.get("stdIdParam").toString();
		
		TestVO data = service.retrieveSubmitStudent(testId, stdIdParam);
		log.info("data!@#$!#$%!#% : {}", data);
		
		
		return	data;
	}
	
	
	
	
	
	////////////////////////////////////////////////////////////////////////////////
	
	@GetMapping("/testEdit")
	public String testEdit(
		@ModelAttribute("testVO") TestVO testVO	
		, Model model
			
	) {
		
		log.info("testVO sdfsdfsdf : {}", testVO);
		
		model.addAttribute("testVO", testVO);
		
		
		return "prof/test/testEdit";
	}
	
	
	
	
}
