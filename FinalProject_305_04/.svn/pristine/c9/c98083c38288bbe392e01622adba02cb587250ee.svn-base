package kr.or.ddit.student.graduation.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import kr.or.ddit.student.graduation.dao.GraduationDAO;
import kr.or.ddit.vo.CurrLectVO;
import kr.or.ddit.vo.GradFulVO;
import kr.or.ddit.vo.GradReqVO;
import kr.or.ddit.vo.MGradReqVO;
import kr.or.ddit.vo.SemesterVO;
import lombok.extern.slf4j.Slf4j;

/**
 * @author 장은호
 * @Since 2023. 2. 16.
 * <pre>
 *
 * ======[[개정이력(Modification Information)]]======
 *   수정일                    수정자                        수정내용
 * --------          --------    -----------------------
 * 2023. 2. 16.       장은호              생성
 * 2023. 2. 23.       장은호               추가(retrieveGradFulList, retrieveCurrLectList
 * 									retrieveTotalCredit,
 * 									retrieveMajorReqCredit, retrieveMajorOptCredit,
 * 									retrieveGEReqCredit, retrieveGEOptCredit,
 * 									getNowCredit)
 *
 * Copyright (c) 2023 by DDIT All right reserved
 * </pre>
 */
@Slf4j
@Service
public class GraduationServiceImpl implements GraduationService {

	@Inject
	private GraduationDAO gradDAO;
	
	@Override
	public List<MGradReqVO> retrieveMGradReqList() {
		return gradDAO.selectMGradReqList();
	}

	@Override
	public MGradReqVO retrieveMGradReq(String mGradReqId) {
		MGradReqVO mGradReqVO = gradDAO.selectMGradReq(mGradReqId);
		return mGradReqVO;
	}

	@Override
	public List<SemesterVO> retrieveSemesterList() {
		List<SemesterVO> semesterList = gradDAO.selectSemester();
		return semesterList;
	}

	@Override
	public int createMGradReq(MGradReqVO mGradReqVO) {
		int rowcnt = gradDAO.insertMGradReq(mGradReqVO);
		return rowcnt;
	}

	@Override
	public int createGradReq(List<GradReqVO> gradReqVO) {
		int rowcnt = gradDAO.insertGradReq(gradReqVO);
		return rowcnt;
	}

	//////////////////////////////////////////////////////////////
	
	@Override
	public List<GradFulVO> retrieveGradFulList(int stdId) {
		List<GradFulVO> gradFulList = gradDAO.selectGradFulList(stdId);
		return gradFulList;
	}

	@Override
	public List<CurrLectVO> retrieveCurrLectList(int stdId) {
		List<CurrLectVO> currLectList = gradDAO.selectCurrLectList(stdId);
		log.info("지금까지 수강한 강의 목록{}", currLectList.get(0));
//		Stream<CurrLectVO> stream = currLectList.stream();
//		stream.forEach(lecture -> log.info("학점{}", lecture.getLectureVO().getCredit()));
//		stream.forEach(lecture -> lecture.getLectureVO().getCredit());
		
		return currLectList;
	}

	@Override
	public int retrieveTotalCredit(int stdId) {
		int totalCredit = gradDAO.selectTotalCredit(stdId);
		return totalCredit;
	}

	@Override
	public int retrieveMajorReqCredit(int stdId) {
		int majorReqCredit = gradDAO.selectMajorReqCredit(stdId);
		return majorReqCredit;
	}

	@Override
	public int retrieveMajorOptCredit(int stdId) {
		int majorOptCredit = gradDAO.selectMajorOptCredit(stdId);
		return majorOptCredit;
	}

	@Override
	public int retrieveGEReqCredit(int stdId) {
		int geReqCredit = gradDAO.selectGEReqCredit(stdId);
		return geReqCredit;
	}

	@Override
	public int retrieveGEOptCredit(int stdId) {
		int geOptCredit = gradDAO.selectGEOptCredit(stdId);
		return geOptCredit;
	}
	
	public Map<String, Integer> getNowCredit(int stdId) {
		int totalCredit = retrieveTotalCredit(stdId);
		int majorReqCredit = retrieveMajorReqCredit(stdId);
		int majorOptCredit = retrieveMajorOptCredit(stdId);
		int geReqCredit = retrieveGEReqCredit(stdId);
		int geOptCredit = retrieveGEOptCredit(stdId);
		
		Map<String, Integer> nowCredits = new HashMap<>();
		nowCredits.put("총이수학점", totalCredit);
		nowCredits.put("전공필수학점", majorReqCredit);
		nowCredits.put("전공선택학점", majorOptCredit);
		nowCredits.put("교양필수학점", geReqCredit);
		nowCredits.put("교양선택학점", geOptCredit);
		
		return nowCredits;
	}
	
	


}
