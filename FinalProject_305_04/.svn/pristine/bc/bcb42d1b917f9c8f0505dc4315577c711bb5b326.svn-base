<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.campus.notice.dao.NoticeDAO">
	
	<!-- 코드프레그먼트 -->
	<sql id="searchFrag">
	    <where>
	    	<if test="simpleCondition neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(simpleCondition.searchWord)">
	    		<choose>
	    			<when test="simpleCondition.searchType eq 'tit'">
	    				INSTR(TIT, #{simpleCondition.searchWord}) > 0
	    			</when>
	    			<when test="simpleCondition.searchType eq 'cont'">
	    				INSTR(CONT, #{simpleCondition.searchWord}) > 0
	    			</when>
					<otherwise>
	    				INSTR(TIT, #{simpleCondition.searchWord}) > 0
	    				OR
	    				INSTR(CONT, #{simpleCondition.searchWord}) > 0
					</otherwise>
	    		</choose>
	    	</if>
	    </where>
	</sql>


	<!-- 게시판 내 전체 게시글 개수 조회하는 SELECT문 -->
	<select id="selectTotalRecord" parameterType="PagingVO" resultType="int">
		SELECT COUNT(*)
		FROM NOTICE
		<include refid="searchFrag" />
	</select>
	
	<!-- 게시글 리스트 조회 SELECT문 -->
	<select id="selectNoticeList" parameterType="PagingVO" resultType="NoticeVO">
		WITH ORDEREDNOTICE AS (
		    SELECT NOTI_ID, EMP_ID, TIT, CONT, WR_DATE, HIT
	    	        , (
			            SELECT COUNT(ATTA_SN)
			            FROM ATTA_FILE
			            WHERE ATTA_FILE.ATTA_ID = NOTICE.NOTI_ID
			        ) AS ATTA_COUNT
		    FROM NOTICE
		    <include refid="searchFrag" />
		    ORDER BY NOTI_ID 
		)
		SELECT  B.* FROM (
			SELECT ROWNUM RNUM2, A.*
			FROM (
			        SELECT ROWNUM RNUM, ORDEREDNOTICE.*
			        FROM ORDEREDNOTICE ORDER BY NOTI_ID DESC
			) A
		) B
		WHERE RNUM2 BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<resultMap type="NoticeVO" id="NoticeMap" autoMapping="true">
		<id property="notiId" column="NOTI_ID" />
		<collection property="attaFileList" ofType="AttaFileVO" autoMapping="true" />
	</resultMap>
	<!-- 게시글 상세 조회 SELECT문 -->
	<select id="selectNotice" parameterType="String" resultMap="NoticeMap">
		SELECT
		    A.NOTI_ID
		    , A.EMP_ID
		    , A.TIT
		    , A.CONT
		    , A.WR_DATE
		    , A.HIT
		    , B.ATTA_ID
		    , B.ATTA_FILENM
		    , B.ATTA_SAVENM
		    , B.ATTA_MIME
		    , B.ATTA_FANCYSIZE
		    , B.ATTA_DOWNLOAD
		    , B.ATTA_PATH
		    , B.ATTA_SN
		    , B.ATTA_TASK
		FROM
		    NOTICE A LEFT OUTER JOIN ATTA_FILE B ON (A.NOTI_ID = B.ATTA_ID)
		WHERE A.NOTI_ID = #{notiId}
	</select>
	
	<!-- 게시글 등록하는 INSERT문 -->
	<insert id="insertNotice" parameterType="NoticeVO">
		<selectKey order="BEFORE" resultType="String" keyProperty="notiId">
			SELECT 'BA1'||LPAD(NOTI_SEQ.NEXTVAL, 4, '0')
			FROM DUAL
		</selectKey>
		INSERT INTO NOTICE (
			NOTI_ID
			, EMP_ID
			, TIT
			, CONT
			, WR_DATE
			, HIT
		) VALUES (
			#{notiId}
			, #{empId, jdbcType=NUMERIC}
			, #{tit, jdbcType=VARCHAR}
			, #{cont, jdbcType=VARCHAR}
			, SYSDATE
			, 0
		)
	</insert>
	
	<!-- 조회수 증가하는 UPDATE문 -->
	<update id="incrementHit" parameterType="String">
		UPDATE NOTICE
		SET
		HIT = HIT + 1
		WHERE NOTI_ID = #{notiId}
	</update>
	
	<!-- 게시글 수정하는 UPDATE문 -->
	<update id="updateNotice" parameterType="NoticeVO">
		UPDATE NOTICE
		SET
		    TIT = #{tit, jdbcType=VARCHAR}
		    , CONT = #{cont, jdbcType=VARCHAR}
		WHERE NOTI_ID = #{notiId}
	</update>
	
	<!-- 게시글 삭제하는 DELETE문 -->
	<delete id="deleteNotice" parameterType="String">
		DELETE 
		FROM NOTICE
		WHERE NOTI_ID = #{notiId}
	</delete>
	
	
</mapper>