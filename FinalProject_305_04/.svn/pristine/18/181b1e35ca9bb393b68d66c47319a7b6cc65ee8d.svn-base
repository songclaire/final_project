<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.prof.scoreProc.dao.ScoreProcessDAO">
	
	<select id="selectTotalRecord" parameterType="map" resultType="int">
		SELECT COUNT(*)
  		FROM LECTURE A INNER JOIN SYLLA_APPR B ON(A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
 		WHERE B.PROF_ID = #{profId}
 		<if test="semeId != null">
  			AND A.SEME_ID = #{semeId}
  		</if>
	</select>
	
	
	<resultMap type="LectureVO" id="lectureMap">
		<result property="lectId" column="LECT_ID"/>
		<result property="rnum" column="RNUM"/>
		<result property="estaSub" column="ESTA_SUB"/>
		<result property="lectNm" column="LECT_NM"/>
		<result property="camYear" column="CAM_YEAR"/>
		<result property="credit" column="CREDIT"/>
		<result property="onfLine" column="ONF_LINE"/>
		<association property="semeVO" autoMapping="true" javaType="SemesterVO"></association>
	</resultMap>
	
	<select id="selectLectList" parameterType="map" resultMap="lectureMap">
		SELECT RNUM
			   , SEME_YEAR
			   , SEME
			   , LECT_ID
			   , ESTA_SUB 
			   , LECT_NM
			   , CAM_YEAR
			   , CREDIT
			   , ONF_LINE
		  FROM (
		       SELECT ROWNUM AS RNUM 
		       , (SELECT SEME_YEAR FROM SEMESTER WHERE SEMESTER.SEME_ID = A.SEME_ID) AS SEME_YEAR
		       , (SELECT SEME FROM SEMESTER WHERE SEMESTER.SEME_ID = A.SEME_ID) AS SEME
		       , A.LECT_ID
		       , (SELECT COMM_DESC FROM COMM WHERE COMM_ID = D.ESTA_SUB) AS ESTA_SUB
		       , A.LECT_NM
		       , A.CAM_YEAR
		       , A.CREDIT
		       , (SELECT COMM_DESC FROM COMM WHERE COMM_ID = A.ONF_LINE) AS ONF_LINE
		            FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
		                           INNER JOIN SYLLABUS C ON (B.SYLLA_ID = C.SYLLA_ID)
		                           INNER JOIN SUB_MAJOR D ON (C.SUB_MAJOR_ID = D.SUB_MAJOR_ID)
		            WHERE B.PROF_ID=#{profId}
		            <if test="semeId != null">
		            	AND A.SEME_ID = #{semeId}
		            </if>
		            ORDER BY 1 DESC
		        )
		   WHERE RNUM BETWEEN #{startRow} AND #{endRow}
	</select>
	
	
	
	<select id="selectTotalStdRecord" parameterType="String" resultType="int">
		 SELECT COUNT(*)
   		   FROM CURR_LECT
  		  WHERE LECT_ID = #{lectId}
	</select>
	
	
	<resultMap type="MyLectureVO" id="profStdMap" autoMapping="true">
		<id property="lectId" column="LECT_ID" />
		<collection property="myStudentList" autoMapping="true" ofType="MyStudentVO"></collection>
	</resultMap>
	
	
	<select id="selectProfStdList" parameterType="map" resultMap="profStdMap">
        WITH STUDENTVIEW AS (
        SELECT A.STD_ID, B.MAJOR_ID, B.MAJOR_NM, C.COLL_NM, C.COLL_ID
        , ( 
        SELECT CAM_YEAR
        FROM (
             SELECT STD_ID 
            , MAX(CAM_YEAR) KEEP(DENSE_RANK LAST ORDER BY RECO_ID) AS CAM_YEAR
            , MAX(RECO_ID) KEEP(DENSE_RANK LAST ORDER BY RECO_ID) AS RECO_ID
            , MAX(REC_NM) KEEP(DENSE_RANK LAST ORDER BY RECO_ID) AS REC_NM
            FROM RECORD 
            GROUP BY STD_ID
            ) RE
            WHERE A.STD_ID = RE.STD_ID
        )   CAM_YEAR  
        FROM STUDENT A INNER JOIN MAJOR B ON (A.MAJOR_ID = B.MAJOR_ID)
						INNER JOIN COLL C ON (B.COLL_ID = C.COLL_ID)
       ), CURR_LECTVIEW AS (
       select D.CURLECT_ID,D.STD_ID, D.LECT_ID
       , E.MAJOR_ID, E.MAJOR_NM, E.COLL_NM, E.COLL_ID, E.CAM_YEAR
       from curr_lect D inner join STUDENTVIEW E on (D.STD_ID = E.STD_ID)
       ), CURR_LECTUSERVIEW AS(
        SELECT F.*, G.USER_NM
        FROM CURR_LECTVIEW F INNER JOIN USR G ON (F.STD_ID = G.USER_ID)
        )
       select H.LECT_ID, H.LECT_NM, H.SEME_ID
       , J.SEME_YEAR "semeVO.semeYear", J.SEME "semeVO.seme"
       ,I.STD_ID, I.USER_NM
       , I.COLL_ID "collVO.collId", I.COLL_NM "collVO.collNm"
       , I.MAJOR_ID "majorVO.majorId", I.MAJOR_NM "majorVO.majorNm"
       , I.CAM_YEAR 
        from LECTURE H INNER JOIN SEMESTER J ON (H.SEME_ID = J.SEME_ID)
        
        LEFT OUTER JOIN CURR_LECTUSERVIEW I ON(H.LECT_ID = I.LECT_ID)
        	WHERE H.LECT_ID=#{lectId}
	</select>
	
	
	<select id="selectScoreCritList" parameterType="String" resultType="ScoreCritVO">
		 WITH SYLID AS (  
	    SELECT B.SYLLA_ID
	      FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
	     WHERE A.LECT_ID = #{lectId}
	 	)  
		 SELECT C.SCORE_CRIT_ID, C.SCORE_CRIT_NM, C.SCORE_CRIT_RATIO, C.SYLLA_ID
		 FROM SCORE_CRIT C, SYLID
		 WHERE C.SYLLA_ID = SYLID.SYLLA_ID
		 ORDER BY 1
	</select>
	
	
	<select id="selectMtScore" parameterType="map" resultType="String">
		SELECT B.TEST_SCORE
  		  FROM CURR_LECT A INNER JOIN TEST_ALLOW B ON (A.CURLECT_ID = B.CURLECT_ID)
          		           INNER JOIN TEST_INFO C ON (B.TEST_ID = C.TEST_ID)
                  		   INNER JOIN EXAM_CAL D ON (C.EXAM_ID = D.EXAM_ID)
 		 WHERE A.STD_ID = #{stdId}
   		   AND A.LECT_ID = #{lectId}
   		   AND D.EXAM_TYPE = '중간고사'
	</select>
	
	
	<select id="selectFtScore" parameterType="map" resultType="String">
		SELECT B.TEST_SCORE
  		  FROM CURR_LECT A INNER JOIN TEST_ALLOW B ON (A.CURLECT_ID = B.CURLECT_ID)
          		           INNER JOIN TEST_INFO C ON (B.TEST_ID = C.TEST_ID)
                  		   INNER JOIN EXAM_CAL D ON (C.EXAM_ID = D.EXAM_ID)
 		 WHERE A.STD_ID = #{stdId}
   		   AND A.LECT_ID = #{lectId}
   		   AND D.EXAM_TYPE = '기말고사'
	</select>
	
	
	<select id="selectAsgnAvgScore" parameterType="map" resultType="String">
		SELECT AVG(B.ASSIGN_SCORE) AS ASSIGN_SCORE
  		  FROM CURR_LECT A INNER JOIN ASGN_SUBM B ON (A.CURLECT_ID = B.CURLECT_ID)
 		 WHERE A.STD_ID = #{stdId}
   		   AND A.LECT_ID = #{lectId}
	</select>
	
	
	<select id="selectAttendScore" parameterType="map" resultType="String">
		SELECT 10 - (FLOOR(COUNT(CASE WHEN ATTEND_STAT = '지각' THEN 1 END) / 3) + COUNT(CASE WHEN ATTEND_STAT = '결석' THEN 1 END)) AS ATTEND_SCORE
		  FROM ATTEND A INNER JOIN CURR_LECT B ON (A.CURLECT_ID = B.CURLECT_ID)
		 WHERE B.STD_ID = #{stdId}
  		   AND B.LECT_ID = #{lectId}
	</select>
	
	
	<select id="selectAttnedList" parameterType="map" resultType="AttendVO">
		SELECT A.CURLECT_ID, A.ATTEND_DATE, A.ATTEND_STAT
  		  FROM ATTEND A INNER JOIN CURR_LECT B ON (A.CURLECT_ID = B.CURLECT_ID)
 		 WHERE B.STD_ID = #{stdId}
  		   AND B.LECT_ID = #{lectId}
	</select>
	
	
	<select id="selectAttendCnt" parameterType="map" resultType="map">
		SELECT COUNT(CASE WHEN A.ATTEND_STAT = '출석' THEN 1 END) AS atndCnt
      		 , COUNT(CASE WHEN A.ATTEND_STAT = '지각' THEN 1 END) AS lateCnt
      		 , COUNT(CASE WHEN A.ATTEND_STAT = '결석' THEN 1 END) AS absnCnt
      		 , COUNT(CASE WHEN A.ATTEND_STAT = '조퇴' THEN 1 END) AS earCnt
      		 , COUNT(CASE WHEN A.ATTEND_STAT = '공결' THEN 1 END) AS depaCnt
  		  FROM ATTEND A INNER JOIN CURR_LECT B ON (A.CURLECT_ID = B.CURLECT_ID)
 		 WHERE B.STD_ID = #{stdId}
   		   AND B.LECT_ID = #{lectId}
	</select>
	
	
	<update id="updateFinScore" parameterType="map">
		UPDATE CURR_LECT
		SET
    		FIN_SCORE = #{finScore}
		WHERE
        	CURLECT_ID = (SELECT CURLECT_ID FROM CURR_LECT WHERE STD_ID = #{stdId} AND LECT_ID = #{lectId})
   		 AND STD_ID = #{stdId}
    	 AND LECT_ID = #{lectId}
	</update>
	
	
	<insert id="insertMtScoreProc" parameterType="map">
		INSERT INTO SCORE_PROC (
		    SCORE_PROC_ID
		    , CURLECT_ID
		    , SCORE_CRIT_ID
		    , CRIT_SCORE
		    , CRIT_FINAL_SCORE
		    , SYLLA_ID
		) VALUES (
		   (SELECT 'FA' || TO_CHAR(SUBSTR(MAX(SCORE_PROC_ID),3,5)+1)FROM SCORE_PROC)
		   , (SELECT CURLECT_ID FROM CURR_LECT  WHERE STD_ID = #{stdId} AND LECT_ID = #{lectId})
		   , #{scoreCritList[0].scoreCritId}
		   , #{mtScore}
		   , #{finScore}
		   , (SELECT C.SYLLA_ID
		                    FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
		                                   INNER JOIN SYLLABUS C ON (B.SYLLA_ID = C.SYLLA_ID)
		                   WHERE LECT_ID = #{lectId})
		)
	</insert>
	
	
		<insert id="insertFtScoreProc" parameterType="map">
		INSERT INTO SCORE_PROC (
		    SCORE_PROC_ID,
		    CURLECT_ID,
		    SCORE_CRIT_ID,
		    CRIT_SCORE,
		    CRIT_FINAL_SCORE,
		    SYLLA_ID
		) VALUES (
		   (SELECT 'FA' || TO_CHAR(SUBSTR(MAX(SCORE_PROC_ID),3,5)+1)FROM SCORE_PROC),
		   (SELECT CURLECT_ID FROM CURR_LECT  WHERE STD_ID = #{stdId} AND LECT_ID = #{lectId}),
		    #{scoreCritList[1].scoreCritId},
		    #{ftScore},
		    #{finScore},
		    (SELECT C.SYLLA_ID
		                    FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
		                                   INNER JOIN SYLLABUS C ON (B.SYLLA_ID = C.SYLLA_ID)
		                   WHERE LECT_ID = #{lectId})
		)
	</insert>
	
		<insert id="insertAsgnScoreProc" parameterType="map">
		INSERT INTO SCORE_PROC (
		    SCORE_PROC_ID,
		    CURLECT_ID,
		    SCORE_CRIT_ID,
		    CRIT_SCORE,
		    CRIT_FINAL_SCORE,
		    SYLLA_ID
		) VALUES (
		   (SELECT 'FA' || TO_CHAR(SUBSTR(MAX(SCORE_PROC_ID),3,5)+1)FROM SCORE_PROC),
		   (SELECT CURLECT_ID FROM CURR_LECT  WHERE STD_ID = #{stdId} AND LECT_ID = #{lectId}),
		    #{scoreCritList[2].scoreCritId},
		    #{asgnScore},
		    #{finScore},
		    (SELECT C.SYLLA_ID
		                    FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
		                                   INNER JOIN SYLLABUS C ON (B.SYLLA_ID = C.SYLLA_ID)
		                   WHERE LECT_ID = #{lectId})
		)
	</insert>
	
	
		<insert id="insertAtndScoreProc" parameterType="map">
		INSERT INTO SCORE_PROC (
		    SCORE_PROC_ID,
		    CURLECT_ID,
		    SCORE_CRIT_ID,
		    CRIT_SCORE,
		    CRIT_FINAL_SCORE,
		    SYLLA_ID
		) VALUES (
		   (SELECT 'FA' || TO_CHAR(SUBSTR(MAX(SCORE_PROC_ID),3,5)+1)FROM SCORE_PROC),
		   (SELECT CURLECT_ID FROM CURR_LECT  WHERE STD_ID = #{stdId} AND LECT_ID = #{lectId}),
		    #{scoreCritList[3].scoreCritId},
		    #{atndScore},
		    #{finScore},
		    (SELECT C.SYLLA_ID
		                    FROM LECTURE A INNER JOIN SYLLA_APPR B ON (A.SYLLA_APPR_ID = B.SYLLA_APPR_ID)
		                                   INNER JOIN SYLLABUS C ON (B.SYLLA_ID = C.SYLLA_ID)
		                   WHERE LECT_ID = #{lectId})
		)
	</insert>
</mapper>