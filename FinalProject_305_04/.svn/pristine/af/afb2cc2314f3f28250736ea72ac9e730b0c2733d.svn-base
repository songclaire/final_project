<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.emp.empInfo.dao.EmpInfoDao">



	<!-- 게시판 내 전체 게시글 개수 조회하는 SELECT문 -->
	<select id="selectTotalRecord" parameterType="PagingVO" resultType="int">
		SELECT COUNT(*)
		FROM v_emp 
	</select>
	
	<resultMap type="EmpVO" id="empMap" autoMapping="true">
		<id property="empId" column="EMP_ID"/>
		<association property="deptVO" javaType="DeptVO" autoMapping="true"/>
		<association property="buildVO" javaType="BuildingVO" autoMapping="true"/>
		<association property="commVO" javaType="CommVO" autoMapping="true"/>
	</resultMap>
	
	
	
	<!-- 게시글 리스트 조회 SELECT문 -->
	<select id="selectEmpInfoList" parameterType="PagingVO" resultMap="empMap">
		WITH EMPINFO AS (
		    SELECT A.USER_NM
		           , B.EMP_ID
		           , (SELECT F.COMM_DESC FROM COMM F WHERE F.COMM_ID = B.POS) POS
		           , B.LEV_DATE
		           , C.DEPT_NM
		      FROM USR A INNER JOIN EMP B ON (A.USER_ID = B.EMP_ID) 
		                 INNER JOIN DEPT C ON (B.DEPT_ID = C.DEPT_ID)
		)
		SELECT B.*
		FROM (
		        SELECT ROWNUM RNUM2, A.*
		        FROM (
		            SELECT ROWNUM RNUM, EMPINFO.*
		            FROM EMPINFO
		            ORDER BY EMP_ID DESC
		        )A
		    ) B
		WHERE RNUM2 BETWEEN #{startRow} AND #{endRow}
	</select>


	<select id="selectEmpInfo" parameterType="int" resultMap="empMap">
		SELECT A.USER_ID
		        , A.USER_NM
		        , A.USER_NM_EN
		        , A.USER_PASS
		        , A.USER_RRN1
		        , A.USER_RRN2
		        , A.USER_PHONE
		        , A.USER_POST
		        , A.USER_ADDR
		        , A.USER_DETAIL_ADDR
		        , A.USER_EMAIL
		        , A.USER_BANK
		        , A.USER_ACCT_HD
		        , A.USER_ACCT_NO
		        , A.USER_GENDER
		        , A.USER_NTL
		        , A.USER_BIR
		        , A.USER_ROLE
		        , B.EMP_ID
		        , B.DEPT_ID
		        , (SELECT F.COMM_DESC FROM COMM F WHERE F.COMM_ID = B.POS) POS
		        , B.ENT_DATE
		        , B.LEV_DATE
		        , C.DEPT_ID
		        , C.DEPT_NM
		        , C.DEPT_TEL
		        , C.BUILD_NUM
		        , D.BUILD_ID
		        , D.BUILD_NUM
		        , D.BUILD_STATE
		        , E.COMM_ID
		        , E.COMM_DESC
		        , E.COMM_GRP_ID        
		  FROM USR A INNER JOIN EMP B ON (A.USER_ID = B.EMP_ID)
		             INNER JOIN DEPT C ON (B.DEPT_ID = C.DEPT_ID)
		             INNER JOIN BUILDING D ON (C.BUILD_ID = D.BUILD_ID AND C.BUILD_NUM = D.BUILD_NUM)
		             LEFT OUTER JOIN COMM E ON (D.BUILD_ID = E.COMM_ID)
		 WHERE B.EMP_ID = #{empId}		             
	</select>
	
	
	
	<insert id="insertUserEmpInfo" parameterType="EmpVO">
		INSERT INTO USR(
		    USER_ID, 
		    USER_NM,
		    USER_NM_EN,
		    USER_PASS,
		    USER_GENDER,
		    USER_RRN1,  
		    USER_RRN2,
		    USER_ROLE,
		    USER_EMAIL,
		    USER_BIR,
		    USER_NTL,
		    USER_PHONE,
		    USER_POST,
		    USER_ADDR,
		    USER_DETAIL_ADDR,
		    USER_BANK,
		    USER_ACCT_HD,
		    USER_ACCT_NO
		)VALUES(
		#{empId,jdbcType=NUMERIC}
		, #{userNm,jdbcType=VARCHAR}
		, #{userNmEn,jdbcType=VARCHAR}
		, #{userPass,jdbcType=VARCHAR}
		, #{userGender,jdbcType=VARCHAR} 
		, #{userRrn1,jdbcType=VARCHAR}
		, #{userRrn2,jdbcType=VARCHAR}
		, #{userRole,jdbcType=VARCHAR}
		, #{userEmail,jdbcType=VARCHAR} 
		, #{userBir,jdbcType=VARCHAR}
		, #{userNtl,jdbcType=VARCHAR}
		, #{userPhone,jdbcType=VARCHAR}
		, #{userPost,jdbcType=VARCHAR}
		, #{userAddr,jdbcType=VARCHAR}
		, #{userDetailAddr,jdbcType=VARCHAR}
		, #{userBank,jdbcType=VARCHAR}
		, #{userAcctHd,jdbcType=VARCHAR}
		, #{userAcctNo,jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertEmpEmpInfo" parameterType="EmpVO">
		INSERT INTO EMP (
		    EMP_ID
		    , DEPT_ID
		    , POS
		    , ENT_DATE
		    , LEV_DATE
		) VALUES (
		     #{empId,jdbcType=NUMERIC}
		    , #{deptId,jdbcType=VARCHAR}
		    , #{pos,jdbcType=VARCHAR}
		    , #{entDate,jdbcType=VARCHAR}
		    , #{levDate,jdbcType=VARCHAR}
		)
	</insert>

	
	
	
	<update id="updateEmpEmpInfo" parameterType="kr.or.ddit.vo.EmpVO">
		UPDATE EMP
		   SET 
				EMP_ID = #{empId,jdbcType=NUMERIC}
				, DEPT_ID = #{deptId,jdbcType=VARCHAR}
				, POS = #{pos,jdbcType=VARCHAR}
				, ENT_DATE = #{entDate,jdbcType=VARCHAR}
				, LEV_DATE = #{levDate,jdbcType=VARCHAR}
		 WHERE EMP_ID = #{empId}
	</update>
	
	
	<update id="updateUserEmpInfo" parameterType="kr.or.ddit.vo.EmpVO">
		UPDATE USR
		SET
			USER_ID = #{empId,jdbcType=NUMERIC}
			, USER_NM = #{userNm,jdbcType=VARCHAR}
			, USER_NM_EN = #{userNmEn,jdbcType=VARCHAR}
			, USER_PASS = #{userPass,jdbcType=VARCHAR}
			, USER_GENDER = #{userGender,jdbcType=VARCHAR}
			, USER_RRN1 = #{userRrn1,jdbcType=VARCHAR}
			, USER_RRN2 = #{userRrn2,jdbcType=VARCHAR}
			, USER_ROLE = #{userRole,jdbcType=VARCHAR}
			, USER_EMAIL = #{userEmail,jdbcType=VARCHAR}
			, USER_BIR = #{userBir,jdbcType=VARCHAR}
			, USER_NTL = #{userNtl,jdbcType=VARCHAR}
			, USER_PHONE = #{userPhone,jdbcType=VARCHAR}
			, USER_POST = #{userPost,jdbcType=VARCHAR}
			, USER_ADDR = #{userAddr,jdbcType=VARCHAR}
			, USER_DETAIL_ADDR = #{userDetailAddr,jdbcType=VARCHAR}
			, USER_BANK = #{userBank,jdbcType=VARCHAR}
			, USER_ACCT_HD = #{userAcctHd,jdbcType=VARCHAR}
			, USER_ACCT_NO = #{userAcctNo,jdbcType=VARCHAR}
		WHERE USER_ID = #{empId}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	
<!-- 사무실 건물 선택하기 -->
	<select id="selectBuilding" resultType="kr.or.ddit.vo.CommVO">
		SELECT COMM_ID, COMM_DESC, COMM_GRP_ID
		  FROM COMM
		 WHERE COMM_GRP_ID = 'BUILDING'
	</select>
	
	<select id="selectBuildingNum" resultType="kr.or.ddit.vo.BuildingVO">
		SELECT BUILD_ID, BUILD_NUM, BUILD_STATE
		  FROM BUILDING
		 WHERE BUILD_ID = #{commId}
	</select>
	
	
	
<!-- 직책 목록 가져오기 -->
	<select id="selectPosList" resultType="kr.or.ddit.vo.CommVO">
		SELECT COMM_ID, COMM_DESC, COMM_GRP_ID
		  FROM COMM
		 WHERE COMM_GRP_ID = 'POS'
	</select>
	
<!-- 부서 목록 가져오기 -->
	<select id="selectDeptList" resultType="kr.or.ddit.vo.DeptVO">
		SELECT DEPT_ID, DEPT_NM, DEPT_TEL, BUILD_NUM, BUILD_ID
		  FROM DEPT
	</select>
	
	
	
	
	
	
</mapper>
























