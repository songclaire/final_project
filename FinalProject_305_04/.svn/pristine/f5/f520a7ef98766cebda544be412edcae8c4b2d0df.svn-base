package kr.or.ddit.emp.profInfo.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.naming.AuthenticationException;

import org.springframework.context.annotation.Bean;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.filter.HiddenHttpMethodFilter;

import kr.or.ddit.emp.profInfo.service.ProfInfoService;
import kr.or.ddit.ui.PaginationRenderer;
import kr.or.ddit.validate.InsertGroup;
import kr.or.ddit.validate.UpdateGroup;
import kr.or.ddit.vo.BuildingVO;
import kr.or.ddit.vo.CollVO;
import kr.or.ddit.vo.CommVO;
import kr.or.ddit.vo.LaboVO;
import kr.or.ddit.vo.MajorVO;
import kr.or.ddit.vo.PagingVO;
import kr.or.ddit.vo.ProfessorVO;
import kr.or.ddit.vo.SearchVO;
import kr.or.ddit.vo.SemesterVO;
import kr.or.ddit.vo.StudentVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 *  교수정보관리 컨트롤러
 * @author 민경진
 *
 */
@Slf4j
@Controller
@RequiredArgsConstructor
@RequestMapping("/emp")
public class ProfessorInfoController {

	private final ProfInfoService service;
	
	@Resource(name="bootstrapPaginationRender")
	private PaginationRenderer renderer;
	
	@Bean
	public HiddenHttpMethodFilter hiddenHttpMethodFilter(){
		return new HiddenHttpMethodFilter();
	}
	
	
	@ModelAttribute("profInfo")
	public ProfessorVO profInfo() {
		return new ProfessorVO();
	}
	

//목록 조회
	@RequestMapping("profInfo")
	public String profInfoList(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage 
			, @ModelAttribute("simpleCondition") SearchVO searchVO
			, Model model
	) {
		PagingVO<ProfessorVO> pagingVO = new PagingVO<>(3,5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);
		System.out.println("pagingVO왔나!!!!!!!!!!!!!!!!" + pagingVO);
		
		service.retrieveProfInfoList(pagingVO);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "emp/profInfo/profInfoList";
	}
	
	
	@GetMapping(value="profInfo", produces=MediaType.APPLICATION_JSON_UTF8_VALUE)
	public String profInfoListData(
			@RequestParam(value="page", required=false, defaultValue="1") int currentPage
			,@ModelAttribute("simpleCondition") SearchVO searchVO
			,Model model
	){
		PagingVO<ProfessorVO> pagingVO = new PagingVO<>(3,5);
		pagingVO.setCurrentPage(currentPage);
		pagingVO.setSimpleCondition(searchVO);
		
		service.retrieveProfInfoList(pagingVO);
		model.addAttribute("pagingVO", pagingVO);
		model.addAttribute("pagingHTML", renderer.renderPagination(pagingVO));
		
		return "jsonView";
		
	}
	
	
	
//상세조회
	@RequestMapping("profInfoView")
	public String profInfoView(
		@RequestParam("what") int profId
		, Model model
	) {
		ProfessorVO profInfo = service.retrieveProfInfo(profId);
		
		model.addAttribute("profInfo", profInfo);
		
		return "emp/profInfo/profInfoView";
	}
	
	
	
	
	
//등록하기
	@GetMapping("/profInfoInsert")
	public String profInfoForm(Model model) {
		
		//빌딩 셀렉트박스로 띄우기
		List<CommVO> commVO = service.selectBuilding();
		model.addAttribute("commVO", commVO);
		
		//단과 셀렉트박스로 띄우기
		List<CollVO> collVO = service.retrieveCollList();
		model.addAttribute("collVO", collVO);
		
		//직책 셀렉트박스로 띄우기
		List<CommVO> commVOPos = service.selectPosList();
		model.addAttribute("commVOPos", commVOPos);
		
		return "emp/profInfo/profInfoForm";
	}
	
	
	@PostMapping("/profInfoInsert")
	public String profInfoInsert(
		@Validated(InsertGroup.class) @ModelAttribute("profInfo") ProfessorVO professorVO, String profId,
		Model model
	) {
		String viewName = null;
		professorVO.setProfId(Integer.parseInt(profId));
		
		String rowcnt = service.createProfTotalProfInfo(professorVO);
		if(rowcnt == "OK") {
			viewName = "redirect:/emp/profInfoView?what="+professorVO.getProfId();
		}
		return viewName;
		
	}
//등록하기
	
	
	
	
	//빌딩 호실 셀렉트박스 띄우기
	@ResponseBody
	@PostMapping("/selectBuildingNumList")
	public List<LaboVO> selectBuildingNumList(@RequestBody CommVO commVO) {
		List<LaboVO> data = service.selectBuildingNum(commVO);
		log.info("data : {}",data);
		return data;
	}
	
	
	
	//단과-학과리스트 출력
	@ResponseBody
	@PostMapping("/selectMajorList2")
	public List<MajorVO> selectMajorList(@RequestBody CollVO collVO) {
		log.info("collVO==================@@@"+ collVO);
		List<MajorVO> data = service.selectMajorList(collVO);
		return data;
	}
	
	
	
	
	
//수정하기
	@RequestMapping("/profInfoEdit")
	public String updateForm(@RequestParam("what") int profId, Model model) {
		
		ProfessorVO prof = service.retrieveProfInfo(profId);
		model.addAttribute("profInfo", prof);
		
		//단과 셀렉트박스로 띄우기
		List<CollVO> collVO = service.retrieveCollList();
		model.addAttribute("collVO", collVO);
		
		//빌딩 셀렉트박스로 띄우기
		List<CommVO> commVO = service.selectBuilding();
		model.addAttribute("commVO", commVO);
		
		//직책 셀렉트박스로 띄우기
		List<CommVO> commVOPos = service.selectPosList();
		model.addAttribute("commVOPos", commVOPos);
		
		
		return "emp/profInfo/profInfoEdit";
	}
	
	
	
	@PostMapping("/profInfoEdit")
	public String profInfoUpdate(
		@Validated(UpdateGroup.class) @ModelAttribute("profInfo") ProfessorVO professorVO
		, Errors errors
		, Model model
	) throws AuthenticationException {
		String viewName = null;
		if(!errors.hasErrors()) {
			String rowcnt = service.updateProfTotalProfInfo(professorVO);
			if(rowcnt == "OK") {
				viewName = "redirect:/emp/profInfoView.do?what=" + professorVO.getProfId();
			} else {
				model.addAttribute("message", "서버 오류, 쫌따 다시");
				viewName = "emp/profInfo/profInfoEdit";
			}
		} else {
			viewName = "emp/profInfo/profInfoEdit";
		}
		return viewName;
	}
	
	
	
	
	
	
	
}


	





















